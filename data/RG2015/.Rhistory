flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(unique_vals, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
str(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
my_vector <- 1:"0"
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_vector <- my_matrix
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4,5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
?colnames
my_data <- colnames(cnames)
colnames(my_data) <- cnames
my_data
exit()
q()
library(datasets)
airquality
hist(airquality$Ozone)
rug(airquality$Ozone)
hist(airquality$Ozone, breaks=50)
hist(airquality$Ozone, breaks=100)
with(subset(airquality, Month==5),points(Wind, Ozone, col="blue"))
quartz()
dev.off()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
diet
str(nlme)
str(BodyWeight)
?llines
?splom
?trellis.par.set
?print.trellis
?par
library(datasets)
data(airquality)
qplot(Ozone, Wind, data=airquality)
library(ggplot2)
qplot(Ozone, Wind, data=airquality)
qplot(Ozone, Wind, data=airquality, color=Month)
qplot(Ozone, Wind, data=airquality, facets=.~Month)
qplot(Ozone, Wind, data=airquality, facets=.~factor(Month)
qplot(Ozone, Wind, data=airquality, facets=.~factor(Month))
airquality=transform(airquality, Month=factor(Month))
qplot(Ozone, Wind, data=airquality, facets=.~Month)
library(movies)
library(Movies)
data(movies)
qplot(votes, rating, data=movies)
qplot(votes, rating, data=movies)+geom_smotth()
qplot(votes, rating, data=movies)+geom_smooth()
load("~/Documents/DOCUMENTS/RESEARCH/postdoc/maps/FR2015/data/RG2015/RG2015.RData")
load("~/Documents/DOCUMENTS/RESEARCH/postdoc/maps/FR2015/data/RG2015/RG2015.RData")
quantile(RG2015$PCfn, probs=c(0.2,0.4,0.6,0.8,1))
max(RG2015$PCfn)
setwd("~/Documents/DOCUMENTS/RESEARCH/postdoc/maps/FR2015/data/RG2015")
library(dplyr)
library(ggplot2)
library(classInt)
# Get Regions codes
regCodes <- read.csv("CodesRegions2016.csv")
names(regCodes) <- c("INSEE", "REG2016") #rename the variables.
# Read electoral data for the first round
reg <- read.csv('Reg_15_Resultats_Communes_T1.csv')
# Add zeros to Departement and Communes INSEE codes.
## change type to character to use the fonction nchar()
reg$Code.du.département <- as.character(reg$Code.du.département)
reg$Code.de.la.commune <- as.character(reg$Code.de.la.commune)
for (i in 1:length(reg$Code.du.département)) {
if (nchar(reg$Code.du.département[i])<2) {
reg$Code.du.département[i] <- paste("0", reg$Code.du.département[i], sep="")
}
if (nchar(reg$Code.de.la.commune[i])<2) {
reg$Code.de.la.commune[i] <- paste("00", reg$Code.de.la.commune[i], sep="")
}
if (nchar(reg$Code.de.la.commune[i])<3) {
reg$Code.de.la.commune[i] <- paste("0", reg$Code.de.la.commune[i], sep="")
}
}
## create a column with the unique INSEE code
reg <- mutate(reg, INSEE=paste(reg$Code.du.département, reg$Code.de.la.commune, sep=""))
reg$Code.de.la.commune<-NULL
# select first columns with not-lists-related data + Abstention rate
regdata <- select(reg,INSEE,DPT=Code.du.département,NAME=Libellé.de.la.commune,ABST1=X..Abs.Ins)
# Add population data
pop <- read.csv('../POP2012/POP2012.csv')
regdata <- merge(regdata,pop, by="INSEE")
# select list-related columns
regT1 <- select(reg, INSEE, contains("Nuance.Liste"), contains("X..Voix.Exp"))
#Find the max value
regT1$max <- apply(regT1[15:27], 1, which.max) # where is the max value
regT1 <- regT1 %>% mutate(colonne=max+1) # Column index of the label of the max value
for (j in 1:length(regT1$INSEE)) {
# get the label of max value (the list with the maximum of votes)
regT1$winnerT1[j] <- as.character(regT1[j,regT1$colonne[j]])
}
# find the value for 'LFN' (Liste Front National)
regT1$Ifn <- apply(regT1[2:14], 1, function(x) which(x=="LFN"))
regT1 <- regT1 %>% mutate(Indexfn=as.numeric(Ifn)+14)
for (h in 1:length(regT1$INSEE)) {
regT1$PCFNT1[h] <- as.numeric(regT1[h,regT1$Indexfn[h]])
}
# join the two tables with relevant variables
## select the relevant variable
regWinnerFnT1 <- select(regT1, INSEE, winnerT1, PCFNT1)
reg <- merge(regdata,regWinnerFnT1, by="INSEE")
reg <- merge (reg, regCodes, by="INSEE")
# display the number of occurrences of each list
table(reg$winner)
# get the decile values
quantile(regdata$ABST1, probs=c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1))
quantile(reg$PCFNT1, probs=c(0.2,0.4,0.6,0.8,1))
# Groupe les listes par affinités politiques. (le FN est tout seul)
RG2015X <- reg %>% mutate(winT1=ifelse(winnerT1=="LEXG"|winnerT1=="LCOM"|winnerT1=="LFG","EXG",winnerT1))
RG2015X <- RG2015X %>% mutate(winT1=ifelse(winnerT1=="LSOC"|winnerT1=="LUG"|winnerT1=="LRDG"|winnerT1=="LDVG","GAUCHE",winT1))
RG2015X <- RG2015X %>% mutate(winT1=ifelse(winnerT1=="LVEG"|winnerT1=="LVEC"|winnerT1=="LECO","ECOLO",winT1))
RG2015T1 <- RG2015X %>% mutate(winT1=ifelse(winnerT1=="LLR"|winnerT1=="LUD"|winnerT1=="LDLF"|winnerT1=="LDVD","DROITE",winT1))
# House keeping (delete and reorder columns)
RG2015T1$winnerT1 <- NULL
RG2015T1 <- RG2015T1[,c(1,3,2,7,5,4,6,8)]
# Export data for the first round
write.csv(RG2015T1, file="DATARG2015T1.csv")
table(RG2015T1$winT1)
####################################################
## SECOND ROUND ####################################
####################################################
reg <- read.csv('Reg_15_Resultats_Communes_T2.csv')
# Add zeros to Departement and Communes INSEE codes.
## change type to character to use the fonction nchar()
reg$Code.du.département <- as.character(reg$Code.du.département)
reg$Code.de.la.commune <- as.character(reg$Code.de.la.commune)
for (i in 1:length(reg$Code.du.département)) {
if (nchar(reg$Code.du.département[i])<2) {
reg$Code.du.département[i] <- paste("0", reg$Code.du.département[i], sep="")
}
if (nchar(reg$Code.de.la.commune[i])<2) {
reg$Code.de.la.commune[i] <- paste("00", reg$Code.de.la.commune[i], sep="")
}
if (nchar(reg$Code.de.la.commune[i])<3) {
reg$Code.de.la.commune[i] <- paste("0", reg$Code.de.la.commune[i], sep="")
}
}
## create a column with the unique INSEE code
reg <- mutate(reg, INSEE=paste(reg$Code.du.département, reg$Code.de.la.commune, sep=""))
reg$Code.de.la.commune<-NULL
# select first column with abstention rate
regT2ABST <- select(reg,INSEE,ABST2=X..Abs.Ins)
# select list-related columns
regT2 <- select(reg, INSEE, contains("Nuance.Liste"), contains("X..Voix.Exp"))
#Find the max value
regT2$max <- apply(regT2[6:9], 1, which.max) # where is the max value
regT2 <- regT2 %>% mutate(colonne=max+1) # Column index of the label of the max value
for (j in 1:length(regT2$INSEE)) {
regT2$winnerT2[j] <- as.character(regT2[j,regT2$colonne[j]])
}
# find the value for 'LFN' (Liste Front National)
regT2$Ifn <- apply(regT2[2:5], 1, function(x) which(x=="LFN"))
regT2 <- regT2 %>% mutate(Indexfn=as.numeric(Ifn)+5)
for (h in 1:length(regT2$INSEE)) {
regT2$PCFNT2[h] <- as.numeric(regT2[h,regT2$Indexfn[h]])
}
# join the two tables with relevant variables
## select the relevant variable
regWinnerFnT2 <- select(regT2, INSEE, PCFNT2,winnerT2)
regT2 <- merge(regT2ABST,regWinnerFnT2, by="INSEE")
unique(regT2$winner)
# Groupe les listes par affinités politiques. (le FN est tout seul)
RG2015T2 <- regT2 %>% mutate(winnerT2=ifelse(winnerT2=="LDVG"|winnerT2=="LUG"|winnerT2=="LSOC","GAUCHE",winnerT2))
# display the number of occurrences of each list
table(RG2015T2$winner)
write.csv(RG2015T2, file="DATARG2015T2.csv")
####################################################
## DIFFERENCE BETWEEN ROUNDS #######################
####################################################
# Merge first and second round data
RG2015 <- merge(RG2015T1,RG2015T2, by="INSEE")
# Search data for Marseille
RG2015[RG2015$INSEE==13055,]
# Calculate difference in ABSTENTION and PCfn between the two rounds
RG2015<-RG2015 %>% mutate(DIFF_ABS=ABST2-ABST1, DIFF_PCFN=PCFNT2-PCFNT1)
View(pop)
which(pop[,pop$POP<1000])
which(pop$POP[,pop$POP<1000])
which(pop[,pop$POP<1000])
pop$POP
pop$POP<1000
which(pop$POP<1000)
length(pop$POP<1000)
apply(pop$POP<1000,1,sum)
apply(pop$POP<1000,2,sum)
apply(pop$POP, 1, function(x)sum(x < 1000))
apply(pop, 1, function(x)sum(x < 1000))
sum(pop$POP<1000)
sum(pop$POP)
View(reg)
# Get Regions codes
regCodes <- read.csv("CodesRegions2016.csv")
names(regCodes) <- c("INSEE", "REG2016") #rename the variables.
# Read electoral data for the first round
reg <- read.csv('Reg_15_Resultats_Communes_T1.csv')
# Add zeros to Departement and Communes INSEE codes.
## change type to character to use the fonction nchar()
reg$Code.du.département <- as.character(reg$Code.du.département)
reg$Code.de.la.commune <- as.character(reg$Code.de.la.commune)
for (i in 1:length(reg$Code.du.département)) {
if (nchar(reg$Code.du.département[i])<2) {
reg$Code.du.département[i] <- paste("0", reg$Code.du.département[i], sep="")
}
if (nchar(reg$Code.de.la.commune[i])<2) {
reg$Code.de.la.commune[i] <- paste("00", reg$Code.de.la.commune[i], sep="")
}
if (nchar(reg$Code.de.la.commune[i])<3) {
reg$Code.de.la.commune[i] <- paste("0", reg$Code.de.la.commune[i], sep="")
}
}
## create a column with the unique INSEE code
reg <- mutate(reg, INSEE=paste(reg$Code.du.département, reg$Code.de.la.commune, sep=""))
reg$Code.de.la.commune<-NULL
# select first columns with not-lists-related data + Abstention rate
regdata <- select(reg,INSEE,DPT=Code.du.département,NAME=Libellé.de.la.commune,ABST1=X..Abs.Ins)
# Add population data
pop <- read.csv('../POP2012/POP2012.csv')
regdata <- merge(regdata,pop, by="INSEE")
# select list-related columns
regT1 <- select(reg, INSEE, contains("Nuance.Liste"), contains("X..Voix.Exp"), contains("X..Voix.Ins"))
View(regT1)
#Find the max value
regT1$max <- apply(regT1[15:27], 1, which.max) # where is the max value
regT1 <- regT1 %>% mutate(colonne=max+1) # Column index of the label of the max value
for (j in 1:length(regT1$INSEE)) {
# get the label of max value (the list with the maximum of votes)
regT1$winnerT1[j] <- as.character(regT1[j,regT1$colonne[j]])
}
regT1$Ifn <- apply(regT1[2:14], 1, function(x) which(x=="LFN"))
regT1 <- regT1 %>% mutate(Indexfn=as.numeric(Ifn)+14, IndexfnInscrits=as.numeric(Ifn)+27)
for (h in 1:length(regT1$INSEE)) {
regT1$PCFNT1[h] <- as.numeric(regT1[h,regT1$Indexfn[h]])
regT1$PCFNT1INSCRITS[h] <- as.numeric(regT1[h,regT1$IndexfnInscrits[h]])
}
View(regT1)
# join the two tables with relevant variables
## select the relevant variable
regWinnerFnT1 <- select(regT1, INSEE, winnerT1, PCFNT1, PCFNT1INSCRITS)
reg <- merge(regdata,regWinnerFnT1, by="INSEE")
reg <- merge (reg, regCodes, by="INSEE")
# display the number of occurrences of each list
table(reg$winner)
# Groupe les listes par affinités politiques. (le FN est tout seul)
RG2015X <- reg %>% mutate(winT1=ifelse(winnerT1=="LEXG"|winnerT1=="LCOM"|winnerT1=="LFG","EXG",winnerT1))
RG2015X <- RG2015X %>% mutate(winT1=ifelse(winnerT1=="LSOC"|winnerT1=="LUG"|winnerT1=="LRDG"|winnerT1=="LDVG","GAUCHE",winT1))
RG2015X <- RG2015X %>% mutate(winT1=ifelse(winnerT1=="LVEG"|winnerT1=="LVEC"|winnerT1=="LECO","ECOLO",winT1))
RG2015T1 <- RG2015X %>% mutate(winT1=ifelse(winnerT1=="LLR"|winnerT1=="LUD"|winnerT1=="LDLF"|winnerT1=="LDVD","DROITE",winT1))
# House keeping (delete and reorder columns)
RG2015T1$winnerT1 <- NULL
RG2015T1 <- RG2015T1[,c(1,3,2,7,5,4,6,8)]
# Export data for the first round
write.csv(RG2015T1, file="DATARG2015T1.csv")
table(RG2015T1$winT1)
####################################################
## SECOND ROUND ####################################
####################################################
reg <- read.csv('Reg_15_Resultats_Communes_T2.csv')
# Add zeros to Departement and Communes INSEE codes.
## change type to character to use the fonction nchar()
reg$Code.du.département <- as.character(reg$Code.du.département)
reg$Code.de.la.commune <- as.character(reg$Code.de.la.commune)
for (i in 1:length(reg$Code.du.département)) {
if (nchar(reg$Code.du.département[i])<2) {
reg$Code.du.département[i] <- paste("0", reg$Code.du.département[i], sep="")
}
if (nchar(reg$Code.de.la.commune[i])<2) {
reg$Code.de.la.commune[i] <- paste("00", reg$Code.de.la.commune[i], sep="")
}
if (nchar(reg$Code.de.la.commune[i])<3) {
reg$Code.de.la.commune[i] <- paste("0", reg$Code.de.la.commune[i], sep="")
}
}
## create a column with the unique INSEE code
reg <- mutate(reg, INSEE=paste(reg$Code.du.département, reg$Code.de.la.commune, sep=""))
reg$Code.de.la.commune<-NULL
# select first column with abstention rate
regT2ABST <- select(reg,INSEE,ABST2=X..Abs.Ins)
# select list-related columns
regT2 <- select(reg, INSEE, contains("Nuance.Liste"), contains("X..Voix.Exp"))
#Find the max value
regT2$max <- apply(regT2[6:9], 1, which.max) # where is the max value
regT2 <- regT2 %>% mutate(colonne=max+1) # Column index of the label of the max value
for (j in 1:length(regT2$INSEE)) {
regT2$winnerT2[j] <- as.character(regT2[j,regT2$colonne[j]])
}
# find the value for 'LFN' (Liste Front National)
regT2$Ifn <- apply(regT2[2:5], 1, function(x) which(x=="LFN"))
regT2 <- regT2 %>% mutate(Indexfn=as.numeric(Ifn)+5)
for (h in 1:length(regT2$INSEE)) {
regT2$PCFNT2[h] <- as.numeric(regT2[h,regT2$Indexfn[h]])
}
# join the two tables with relevant variables
## select the relevant variable
regWinnerFnT2 <- select(regT2, INSEE, PCFNT2,winnerT2)
regT2 <- merge(regT2ABST,regWinnerFnT2, by="INSEE")
unique(regT2$winner)
# Groupe les listes par affinités politiques. (le FN est tout seul)
RG2015T2 <- regT2 %>% mutate(winnerT2=ifelse(winnerT2=="LDVG"|winnerT2=="LUG"|winnerT2=="LSOC","GAUCHE",winnerT2))
# display the number of occurrences of each list
table(RG2015T2$winner)
write.csv(RG2015T2, file="DATARG2015T2.csv")
####################################################
## DIFFERENCE BETWEEN ROUNDS #######################
####################################################
# Merge first and second round data
RG2015 <- merge(RG2015T1,RG2015T2, by="INSEE")
# Search data for Marseille
RG2015[RG2015$INSEE==13055,]
# Calculate difference in ABSTENTION and PCfn between the two rounds
RG2015<-RG2015 %>% mutate(DIFF_ABS=ABST2-ABST1, DIFF_PCFN=PCFNT2-PCFNT1)
# export data for both rounds.
write.csv(RG2015, "DATARG2015.csv")
table(RG2015$winnerT2)
View(RG2015)
quantile(RG2015$PCFNT1INSCRITS, probs=c(0.2,0.4,0.6,0.8,1))
View(RG2015X)
View(RG2015T1)
library(dplyr)
library(ggplot2)
library(classInt)
####################################################
## FIRST ROUND #####################################
####################################################
# Get Regions codes
regCodes <- read.csv("CodesRegions2016.csv")
names(regCodes) <- c("INSEE", "REG2016") #rename the variables.
# Read electoral data for the first round
reg <- read.csv('Reg_15_Resultats_Communes_T1.csv')
# Add zeros to Departement and Communes INSEE codes.
## change type to character to use the fonction nchar()
reg$Code.du.département <- as.character(reg$Code.du.département)
reg$Code.de.la.commune <- as.character(reg$Code.de.la.commune)
for (i in 1:length(reg$Code.du.département)) {
if (nchar(reg$Code.du.département[i])<2) {
reg$Code.du.département[i] <- paste("0", reg$Code.du.département[i], sep="")
}
if (nchar(reg$Code.de.la.commune[i])<2) {
reg$Code.de.la.commune[i] <- paste("00", reg$Code.de.la.commune[i], sep="")
}
if (nchar(reg$Code.de.la.commune[i])<3) {
reg$Code.de.la.commune[i] <- paste("0", reg$Code.de.la.commune[i], sep="")
}
}
## create a column with the unique INSEE code
reg <- mutate(reg, INSEE=paste(reg$Code.du.département, reg$Code.de.la.commune, sep=""))
reg$Code.de.la.commune<-NULL
# select first columns with not-lists-related data + Abstention rate
regdata <- select(reg,INSEE,DPT=Code.du.département,NAME=Libellé.de.la.commune,ABST1=X..Abs.Ins)
# Add population data
pop <- read.csv('../POP2012/POP2012.csv')
regdata <- merge(regdata,pop, by="INSEE")
# select list-related columns
regT1 <- select(reg, INSEE, contains("Nuance.Liste"), contains("X..Voix.Exp"), contains("X..Voix.Ins"))
#Find the max value
regT1$max <- apply(regT1[15:27], 1, which.max) # where is the max value
regT1 <- regT1 %>% mutate(colonne=max+1) # Column index of the label of the max value
for (j in 1:length(regT1$INSEE)) {
# get the label of max value (the list with the maximum of votes)
regT1$winnerT1[j] <- as.character(regT1[j,regT1$colonne[j]])
}
# find the values for 'LFN' (Liste Front National)
regT1$Ifn <- apply(regT1[2:14], 1, function(x) which(x=="LFN"))
regT1 <- regT1 %>% mutate(Indexfn=as.numeric(Ifn)+14, IndexfnInscrits=as.numeric(Ifn)+27)
for (h in 1:length(regT1$INSEE)) {
regT1$PCFNT1[h] <- as.numeric(regT1[h,regT1$Indexfn[h]])
regT1$PCFNT1INSCRITS[h] <- as.numeric(regT1[h,regT1$IndexfnInscrits[h]])
}
# join the two tables with relevant variables
## select the relevant variable
regWinnerFnT1 <- select(regT1, INSEE, winnerT1, PCFNT1, PCFNT1INSCRITS)
reg <- merge(regdata,regWinnerFnT1, by="INSEE")
reg <- merge (reg, regCodes, by="INSEE")
# display the number of occurrences of each list
table(reg$winnerT1)
# get the decile values
quantile(regdata$ABST1, probs=c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1))
quantile(reg$PCFNT1, probs=c(0.2,0.4,0.6,0.8,1))
# Groupe les listes par affinités politiques. (le FN est tout seul)
RG2015X <- reg %>% mutate(winT1=ifelse(winnerT1=="LEXG"|winnerT1=="LCOM"|winnerT1=="LFG","EXG",winnerT1))
RG2015X <- RG2015X %>% mutate(winT1=ifelse(winnerT1=="LSOC"|winnerT1=="LUG"|winnerT1=="LRDG"|winnerT1=="LDVG","GAUCHE",winT1))
RG2015X <- RG2015X %>% mutate(winT1=ifelse(winnerT1=="LVEG"|winnerT1=="LVEC"|winnerT1=="LECO","ECOLO",winT1))
RG2015T1 <- RG2015X %>% mutate(winT1=ifelse(winnerT1=="LLR"|winnerT1=="LUD"|winnerT1=="LDLF"|winnerT1=="LDVD","DROITE",winT1))
View(RG2015T1)
RG2015T1$winnerT1 <- NULL
View(RG2015T1)
RG2015T1 <- RG2015T1[,c(1,3,2,8,5,9,4,6,7)]
View(RG2015T1)
# Export data for the first round
write.csv(RG2015T1, file="DATARG2015T1.csv")
table(RG2015T1$winT1)
####################################################
## SECOND ROUND ####################################
####################################################
reg <- read.csv('Reg_15_Resultats_Communes_T2.csv')
# Add zeros to Departement and Communes INSEE codes.
## change type to character to use the fonction nchar()
reg$Code.du.département <- as.character(reg$Code.du.département)
reg$Code.de.la.commune <- as.character(reg$Code.de.la.commune)
for (i in 1:length(reg$Code.du.département)) {
if (nchar(reg$Code.du.département[i])<2) {
reg$Code.du.département[i] <- paste("0", reg$Code.du.département[i], sep="")
}
if (nchar(reg$Code.de.la.commune[i])<2) {
reg$Code.de.la.commune[i] <- paste("00", reg$Code.de.la.commune[i], sep="")
}
if (nchar(reg$Code.de.la.commune[i])<3) {
reg$Code.de.la.commune[i] <- paste("0", reg$Code.de.la.commune[i], sep="")
}
}
## create a column with the unique INSEE code
reg <- mutate(reg, INSEE=paste(reg$Code.du.département, reg$Code.de.la.commune, sep=""))
reg$Code.de.la.commune<-NULL
# select first column with abstention rate
regT2ABST <- select(reg,INSEE,ABST2=X..Abs.Ins)
# select list-related columns
regT2 <- select(reg, INSEE, contains("Nuance.Liste"), contains("X..Voix.Exp"))
#Find the max value
regT2$max <- apply(regT2[6:9], 1, which.max) # where is the max value
regT2 <- regT2 %>% mutate(colonne=max+1) # Column index of the label of the max value
for (j in 1:length(regT2$INSEE)) {
regT2$winnerT2[j] <- as.character(regT2[j,regT2$colonne[j]])
}
# find the value for 'LFN' (Liste Front National)
regT2$Ifn <- apply(regT2[2:5], 1, function(x) which(x=="LFN"))
regT2 <- regT2 %>% mutate(Indexfn=as.numeric(Ifn)+5)
for (h in 1:length(regT2$INSEE)) {
regT2$PCFNT2[h] <- as.numeric(regT2[h,regT2$Indexfn[h]])
}
# join the two tables with relevant variables
## select the relevant variable
regWinnerFnT2 <- select(regT2, INSEE, PCFNT2,winnerT2)
regT2 <- merge(regT2ABST,regWinnerFnT2, by="INSEE")
unique(regT2$winner)
# Groupe les listes par affinités politiques. (le FN est tout seul)
RG2015T2 <- regT2 %>% mutate(winnerT2=ifelse(winnerT2=="LDVG"|winnerT2=="LUG"|winnerT2=="LSOC","GAUCHE",winnerT2))
# display the number of occurrences of each list
table(RG2015T2$winner)
write.csv(RG2015T2, file="DATARG2015T2.csv")
####################################################
## DIFFERENCE BETWEEN ROUNDS #######################
####################################################
# Merge first and second round data
RG2015 <- merge(RG2015T1,RG2015T2, by="INSEE")
# Search data for Marseille
RG2015[RG2015$INSEE==13055,]
# Calculate difference in ABSTENTION and PCfn between the two rounds
RG2015<-RG2015 %>% mutate(DIFF_ABS=ABST2-ABST1, DIFF_PCFN=PCFNT2-PCFNT1)
# export data for both rounds.
write.csv(RG2015, "DATARG2015.csv")
table(RG2015$winnerT2)
